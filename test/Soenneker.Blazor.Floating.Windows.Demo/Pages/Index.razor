@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.Floating.Windows
@using Soenneker.Blazor.Floating.Windows.Options

@inject ILogger<Index> Logger
@inject IJSRuntime JS

@* Add Font Awesome for GitHub icon *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />

<div class="github-topright">
    <a href="https://github.com/soenneker/soenneker.blazor.floating.windows" target="_blank" title="View on GitHub">
        <i class="fab fa-github"></i>
    </a>
</div>

<style>
    .github-topright {
        position: fixed;
        top: 1.2rem;
        right: 1.5rem;
        z-index: 2000;
    }
    .github-topright a {
        color: #24292f;
        font-size: 2.2rem;
        display: inline-block;
        transition: color 0.2s;
        text-decoration: none;
        background: none;
        border-radius: 0;
        box-shadow: none;
        padding: 0;
    }
    .github-topright a:hover {
        color: #0366d6;
        background: none;
    }
</style>

<div class="hero-section">
    <div class="hero-content">
        <div class="logo-container">
            <img src="https://user-images.githubusercontent.com/4441470/224455560-91ed3ee7-f510-4041-a8d2-3fc093025112.png" alt="Logo" class="hero-logo" />
        </div>
        <h1 class="hero-title">Soenneker.Blazor.Floating.Windows</h1>
        <p class="hero-subtitle">Powerful, customizable floating windows for Blazor applications</p>
        <div class="hero-badges">
            <span class="badge">🚀 Modern</span>
            <span class="badge">⚡ Fast</span>
            <span class="badge">🎨 Customizable</span>
            <span class="badge">📱 Responsive</span>
        </div>
    </div>
</div>

<div class="demo-container">
    <div class="demo-section">
        <h2 class="section-title">🎮 Interactive Examples</h2>
        <p class="section-description">Click the buttons below to see different floating window configurations in action.</p>
        <div class="demo-controls">
            <button @onclick="ShowBasicWindow" class="demo-button primary"><span class="button-icon">🪟</span>Basic Window</button>
            <button @onclick="ShowCustomWindow" class="demo-button secondary"><span class="button-icon">🎨</span>Custom Styled</button>
            <button @onclick="ShowCenteredWindow" class="demo-button success"><span class="button-icon">🎯</span>Centered Window</button>
            <button @onclick="ShowDarkWindow" class="demo-button dark"><span class="button-icon">🌙</span>Dark Theme</button>
            <button @onclick="ShowInteractiveWindow" class="demo-button warning"><span class="button-icon">⚡</span>Interactive Demo</button>
            <button @onclick="ShowDataWindow" class="demo-button info"><span class="button-icon">📊</span>Data Display</button>
            <button @onclick="ShowAllWindows" class="action-button show-all"><span class="button-icon">📂</span>Show All Windows</button>
            <button @onclick="HideAllWindows" class="action-button hide-all"><span class="button-icon">🗂️</span>Hide All Windows</button>
        </div>
    </div>
    <div class="demo-section">
        <h2 class="section-title">✨ Features Showcase</h2>
        <div class="features-grid">
            <div class="feature-card"><div class="feature-icon">🎯</div><h3>Draggable Windows</h3><p>Drag windows by the title bar to reposition them anywhere on the screen.</p></div>
            <div class="feature-card"><div class="feature-icon">📏</div><h3>Resizable Windows</h3><p>Resize windows by dragging the edges and corners for perfect fit.</p></div>
            <div class="feature-card"><div class="feature-icon">🎨</div><h3>Customizable Themes</h3><p>Light, dark, and custom themes with full CSS customization support.</p></div>
            <div class="feature-card"><div class="feature-icon">📱</div><h3>Responsive Design</h3><p>Windows adapt to different screen sizes and maintain usability.</p></div>
            <div class="feature-card"><div class="feature-icon">🔒</div><h3>Viewport Constraints</h3><p>Windows stay within the viewport bounds for better user experience.</p></div>
            <div class="feature-card"><div class="feature-icon">⚡</div><h3>Z-Index Management</h3><p>Automatic z-index management ensures proper window layering.</p></div>
            <div class="feature-card"><div class="feature-icon">🔄</div><h3>Dynamic Auto Resize</h3><p>Windows can automatically resize to fit their content as it grows or shrinks.</p></div>
        </div>
    </div>
    <div class="demo-section">
        <h2 class="section-title">📚 Code Examples</h2>
        <div class="code-examples">
            <div class="code-tabs">
                <button class="tab-button @(activeTab == "basic" ? "active" : "")" @onclick="SetTabBasic">Basic Usage</button>
                <button class="tab-button @(activeTab == "custom" ? "active" : "")" @onclick="SetTabCustom">Custom Styling</button>
                <button class="tab-button @(activeTab == "events" ? "active" : "")" @onclick="SetTabEvents">Event Handling</button>
            </div>
            <div class="code-content">
                @if (activeTab == "basic")
                {
                    <pre class="code-block"><code>&lt;FloatingWindow Title="My Window" 
                Width="400" Height="300"
                InitialX="50" InitialY="50"&gt;
    &lt;div&gt;Your content here&lt;/div&gt;
&lt;/FloatingWindow&gt;</code></pre>
                }
                else if (activeTab == "custom")
                {
                    <pre class="code-block"><code>var customTheme = new FloatingWindowStyleOptions
{
    TitleBarBackgroundGradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
    TitleBarTextColor = "#ffffff",
    CloseButtonTextColor = "#ffffff"
};

&lt;FloatingWindow StyleOptions="customTheme"&gt;
    &lt;div&gt;Custom styled content&lt;/div&gt;
&lt;/FloatingWindow&gt;</code></pre>
                }
                else if (activeTab == "events")
                {
                    <pre class="code-block"><code>&lt;FloatingWindow OnShow="OnWindowShow"
                OnHide="OnWindowHide"
                OnDragStart="OnDragStart"
                OnDragEnd="OnDragEnd"&gt;
    &lt;div&gt;Event-driven content&lt;/div&gt;
&lt;/FloatingWindow&gt;</code></pre>
                }
            </div>
        </div>
    </div>
    <div class="demo-section">
        <h2 class="section-title">📈 Live Statistics</h2>
        <div class="stats-grid">
            <div class="stat-card"><div class="stat-number">@windowShowCount</div><div class="stat-label">Windows Shown</div></div>
            <div class="stat-card"><div class="stat-number">@dragCount</div><div class="stat-label">Drag Operations</div></div>
            <div class="stat-card"><div class="stat-number">@activeWindows</div><div class="stat-label">Active Windows</div></div>
            <div class="stat-card"><div class="stat-number">@totalInteractions</div><div class="stat-label">Total Interactions</div></div>
        </div>
    </div>
</div>

<!-- Basic Window -->
<FloatingWindow @ref="basicWindow"
                Title="Basic Window"
                Width="400"
                Height="300"
                InitialX="50"
                InitialY="50"
                StyleOptions="FloatingWindowStyleOptions.DefaultLight"
                OnShow="OnWindowShow"
                OnHide="OnWindowHide"
                OnDragStart="OnDragStart"
                OnDragEnd="OnDragEnd"
AutoSizeToContent="true"
>
    <div class="window-content">
        <h3>Basic Floating Window</h3>
        <p>This is a basic floating window with default light theme styling.</p>
        <div class="window-features">
            <div class="feature-item">✅ Draggable title bar</div>
            <div class="feature-item">✅ Resizable edges</div>
            <div class="feature-item">✅ Close button</div>
            <div class="feature-item">✅ Light theme</div>
        </div>
        <button @onclick="() => basicWindow?.Hide()" class="window-button">Hide Window</button>
    </div>
</FloatingWindow>

<!-- Custom Window -->
<FloatingWindow @ref="customWindow"
                Title="Custom Styled Window"
                Width="500"
                Height="400"
                InitialX="200"
                InitialY="100"
                StyleOptions="DemoTheme"
                ShowCloseButton="true"
                Draggable="true"
                Resizable="true">
    <div class="window-content">
        <h3>Custom Styled Window</h3>
        <p>This window uses a beautiful gradient theme with enhanced styling.</p>
        <div class="custom-content">
            <div class="card">
                <h4>🎨 Custom Theme</h4>
                <p>Gradient background with custom colors and hover effects.</p>
            </div>
            <div class="card">
                <h4>⚡ Interactive</h4>
                <p>Fully interactive with smooth animations and transitions.</p>
            </div>
        </div>
        <div class="window-actions">
            <button @onclick="() => customWindow?.Close()" class="window-button danger">Close Window</button>
            <button @onclick="() => customWindow?.SetSize(600, 450)" class="window-button">Resize</button>
        </div>
    </div>
</FloatingWindow>

<!-- Centered Window -->
<FloatingWindow @ref="centeredWindow"
                Title="Centered Window"
                Width="350"
                Height="250"
                StyleOptions="FloatingWindowStyleOptions.DefaultLight"
                CenterOnShow="true">
    <div class="window-content">
        <h3>Centered Window</h3>
        <p>This window automatically centers itself when shown.</p>
        <div class="centered-controls">
            <button @onclick="() => centeredWindow?.SetPosition(100, 100)" class="window-button small">Move to (100,100)</button>
            <button @onclick="() => centeredWindow?.SetSize(400, 300)" class="window-button small">Resize to 400x300</button>
            <button @onclick="SetPositionToCenter" class="window-button small">Re-center</button>
        </div>
    </div>
</FloatingWindow>

<!-- Dark Window -->
<FloatingWindow @ref="darkWindow"
                Title="Dark Theme Window"
                Width="450"
                Height="300"
                InitialX="300"
                InitialY="150"
                StyleOptions="FloatingWindowStyleOptions.DefaultDark">
    <div class="window-content dark">
        <h3>Dark Theme Window</h3>
        <p>Perfect for applications that support dark mode preferences.</p>
        <div class="dark-content">
            <div class="dark-card">
                <h4>🌙 Dark Mode</h4>
                <p>Easy on the eyes with proper contrast and readability.</p>
            </div>
        </div>
        <button @onclick="() => darkWindow?.Hide()" class="window-button">Hide Window</button>
    </div>
</FloatingWindow>

<!-- Interactive Window -->
<FloatingWindow @ref="interactiveWindow"
                Title="Interactive Demo"
                Width="500"
                Height="400"
                InitialX="150"
                InitialY="200"
                StyleOptions="InteractiveTheme">
    <div class="window-content">
        <h3>Interactive Demo Window</h3>
        <p>This window demonstrates dynamic content and real-time updates.</p>
        <div class="interactive-content">
            <div class="counter-section">
                <h4>Counter: @interactiveCounter</h4>
                <div class="counter-controls">
                    <button @onclick="IncrementCounter" class="counter-btn">+</button>
                    <button @onclick="DecrementCounter" class="counter-btn">-</button>
                    <button @onclick="ResetCounter" class="counter-btn">Reset</button>
                </div>
            </div>
            <div class="color-picker">
                <h4>Theme Color</h4>
                <div class="color-options">
                    <button @onclick="@(() => ChangeThemeColor("#667eea"))" class="color-btn" style="background: #667eea"></button>
                    <button @onclick="@(() => ChangeThemeColor("#f56565"))" class="color-btn" style="background: #f56565"></button>
                    <button @onclick="@(() => ChangeThemeColor("#48bb78"))" class="color-btn" style="background: #48bb78"></button>
                    <button @onclick="@(() => ChangeThemeColor("#ed8936"))" class="color-btn" style="background: #ed8936"></button>
                </div>
            </div>
        </div>
        <div class="window-actions">
            <button @onclick="() => interactiveWindow?.Hide()" class="window-button">Close</button>
        </div>
    </div>
</FloatingWindow>

<!-- Data Window -->
<FloatingWindow @ref="dataWindow"
                Title="Data Display Window"
                Width="600"
                Height="450"
                InitialX="250"
                InitialY="100"
                StyleOptions="DataTheme">
    <div class="window-content">
        <h3>Data Display Window</h3>
        <p>Showcase for displaying structured data in floating windows.</p>
        <div class="data-content">
            <div class="data-table">
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Progress</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (DataItem item in dataItems)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td><span class="status @item.Status.ToLower()">@item.Status</span></td>
                                <td>
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: @(item.Progress)%"></div>
                                    </div>
                                    <span class="progress-text">@item.Progress%</span>
                                </td>
                                <td>
                                    <button @onclick="() => UpdateItem(item.Id)" class="action-btn">Update</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="window-actions">
            <button @onclick="AddDataItem" class="window-button">Add Item</button>
            <button @onclick="() => dataWindow?.Hide()" class="window-button">Close</button>
        </div>
    </div>
</FloatingWindow>

@code {
    private FloatingWindow? basicWindow;
    private FloatingWindow? customWindow;
    private FloatingWindow? centeredWindow;
    private FloatingWindow? darkWindow;
    private FloatingWindow? interactiveWindow;
    private FloatingWindow? dataWindow;
    private FloatingWindow? dynamicAutoSizeWindow;

    private string activeTab = "basic";
    private int windowShowCount;
    private int dragCount;
    private int activeWindows;
    private int totalInteractions;
    private int interactiveCounter;

    private List<DataItem> dataItems = new()
    {
        new DataItem { Id = 1, Name = "Project Alpha", Status = "Active", Progress = 75 },
        new DataItem { Id = 2, Name = "Project Beta", Status = "Pending", Progress = 30 },
        new DataItem { Id = 3, Name = "Project Gamma", Status = "Completed", Progress = 100 },
        new DataItem { Id = 4, Name = "Project Delta", Status = "Active", Progress = 45 }
    };

    private List<string> dynamicItems = new() { "Item 1", "Item 2" };

    // Demo theme for the custom window
    private static readonly FloatingWindowStyleOptions DemoTheme = new()
    {
        TitleBarBackgroundGradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
        TitleBarTextColor = "#ffffff",
        TitleBarBorderBottomColor = "rgba(255, 255, 255, 0.1)",
        CloseButtonTextColor = "#ffffff",
        CloseButtonHoverBackgroundColor = "rgba(255, 255, 255, 0.2)",
        CloseButtonActiveBackgroundColor = "rgba(255, 255, 255, 0.3)",
        ResizeHandleHoverBackgroundColor = "rgba(102, 126, 234, 0.1)",
        FocusBorderColor = "rgba(102, 126, 234, 0.3)"
    };

    // Interactive theme
    private static readonly FloatingWindowStyleOptions InteractiveTheme = new()
    {
        TitleBarBackgroundGradient = "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
        TitleBarTextColor = "#ffffff",
        TitleBarBorderBottomColor = "rgba(255, 255, 255, 0.1)",
        CloseButtonTextColor = "#ffffff",
        CloseButtonHoverBackgroundColor = "rgba(255, 255, 255, 0.2)",
        ResizeHandleHoverBackgroundColor = "rgba(240, 147, 251, 0.1)",
        FocusBorderColor = "rgba(240, 147, 251, 0.3)"
    };

    // Data theme
    private static readonly FloatingWindowStyleOptions DataTheme = new()
    {
        TitleBarBackgroundGradient = "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
        TitleBarTextColor = "#ffffff",
        TitleBarBorderBottomColor = "rgba(255, 255, 255, 0.1)",
        CloseButtonTextColor = "#ffffff",
        CloseButtonHoverBackgroundColor = "rgba(255, 255, 255, 0.2)",
        ResizeHandleHoverBackgroundColor = "rgba(79, 172, 254, 0.1)",
        FocusBorderColor = "rgba(79, 172, 254, 0.3)"
    };

    private void ShowBasicWindow()
    {
        basicWindow?.Show();
        totalInteractions++;
    }

    private void ShowCustomWindow()
    {
        customWindow?.Show();
        totalInteractions++;
    }

    private void ShowCenteredWindow()
    {
        centeredWindow?.Show();
        totalInteractions++;
    }

    private void ShowDarkWindow()
    {
        darkWindow?.Show();
        totalInteractions++;
    }

    private void ShowInteractiveWindow()
    {
        interactiveWindow?.Show();
        totalInteractions++;
    }

    private void ShowDataWindow()
    {
        dataWindow?.Show();
        totalInteractions++;
    }

    private void ShowAllWindows()
    {
        basicWindow?.Show();
        customWindow?.Show();
        centeredWindow?.Show();
        darkWindow?.Show();
        interactiveWindow?.Show();
        dataWindow?.Show();
        totalInteractions++;
    }

    private void HideAllWindows()
    {
        basicWindow?.Hide();
        customWindow?.Hide();
        centeredWindow?.Hide();
        darkWindow?.Hide();
        interactiveWindow?.Hide();
        dataWindow?.Hide();
        totalInteractions++;
    }

    private void OnWindowShow()
    {
        windowShowCount++;
        activeWindows++;
        Logger.LogInformation("Window shown");
    }

    private void OnWindowHide()
    {
        activeWindows = Math.Max(0, activeWindows - 1);
        Logger.LogInformation("Window hidden");
    }

    private void OnDragStart()
    {
        Logger.LogInformation("Window drag started");
    }

    private void OnDragEnd()
    {
        dragCount++;
        totalInteractions++;
        Logger.LogInformation("Window drag ended");
    }

    private void IncrementCounter()
    {
        interactiveCounter++;
        totalInteractions++;
    }

    private void DecrementCounter()
    {
        interactiveCounter--;
        totalInteractions++;
    }

    private void ResetCounter()
    {
        interactiveCounter = 0;
        totalInteractions++;
    }

    private void ChangeThemeColor(string color)
    {
        // This would update the theme dynamically
        totalInteractions++;
    }

    private void UpdateItem(int id)
    {
        DataItem? item = dataItems.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            item.Progress = Math.Min(100, item.Progress + 10);
            totalInteractions++;
        }
    }

    private void AddDataItem()
    {
        int newId = dataItems.Count > 0 ? dataItems.Max(x => x.Id) + 1 : 1;
        dataItems.Add(new DataItem
        {
            Id = newId,
            Name = $"Project {char.ConvertFromUtf32(65 + (newId - 1) % 26)}",
            Status = "Pending",
            Progress = 0
        });
        totalInteractions++;
    }

    private async Task SetPositionToCenter()
    {
        if (centeredWindow is not null)
        {
            await centeredWindow.Center();
        }
    }

    private void AddDynamicItem() => dynamicItems.Add($"Item {dynamicItems.Count + 1}");
    private void RemoveDynamicItem() { if (dynamicItems.Count > 0) dynamicItems.RemoveAt(dynamicItems.Count - 1); }

    private void SetTabBasic() => activeTab = "basic";
    private void SetTabCustom() => activeTab = "custom";
    private void SetTabEvents() => activeTab = "events";

    public class DataItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Status { get; set; } = "";
        public int Progress { get; set; }
    }
}