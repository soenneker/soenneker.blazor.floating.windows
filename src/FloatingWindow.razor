@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Blazor.Floating.Windows.Abstract
@using Soenneker.Blazor.Floating.Windows.Options
@using Soenneker.Extensions.ValueTask
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.Floating.Windows.Dtos
@using Soenneker.Extensions.CancellationTokens

@inject IFloatingWindowInterop WindowInterop
@inject ILogger<FloatingWindow> Logger

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent
@implements IFloatingWindow

<div id="@ElementId"
     class="floating-window @(_visible ? "visible" : "") @(MergedOptions.StyleOptions.CustomClass)"
     style="@GetWindowStyles()"
     data-dark-mode="@MergedOptions.StyleOptions.UseDarkMode.ToString().ToLower()" >
    @if (MergedOptions.ShowTitleBar)
    {
        <div class="floating-window-titlebar" style="@GetTitleBarStyles()" >
            @if (HeaderContent != null)
            {
                @HeaderContent
            }
            else
            {
                <div class="floating-window-title" style="@GetTitleStyles()" >@(MergedOptions.Title ?? "Window")</div>
            }
            @if (MergedOptions.ShowCloseButton)
            {
                <button class="floating-window-close" type="button" aria-label="Close" style="@GetCloseButtonStyles()" @onclick="OnCloseClick" >
                    <span>&times;</span>
                </button>
            }
        </div>
    }

    <div class="floating-window-content" style="@GetContentStyles()" >
        @ChildContent
    </div>

    @if (MergedOptions.Resizable)
    {
        <div class="floating-window-resize-handle resize-n" data-direction="n" ></div>
        <div class="floating-window-resize-handle resize-e" data-direction="e" ></div>
        <div class="floating-window-resize-handle resize-s" data-direction="s" ></div>
        <div class="floating-window-resize-handle resize-w" data-direction="w" ></div>
        <div class="floating-window-resize-handle resize-ne" data-direction="ne" ></div>
        <div class="floating-window-resize-handle resize-nw" data-direction="nw" ></div>
        <div class="floating-window-resize-handle resize-se" data-direction="se" ></div>
        <div class="floating-window-resize-handle resize-sw" data-direction="sw" ></div>
    }
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? WindowAttributes { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public RenderFragment? HeaderContent { get; set; }

    [Parameter]
    public string ElementId { get; set; } = "fw-" + Guid.NewGuid();

    [Parameter]
    public EventCallback OnShow { get; set; }

    [Parameter]
    public EventCallback OnHide { get; set; }

    [Parameter]
    public EventCallback OnDragStart { get; set; }

    [Parameter]
    public EventCallback OnDragEnd { get; set; }

    [Parameter]
    public FloatingWindowOptions Options { get; set; } = new();

    [Parameter]
    public bool? Draggable { get; set; }

    [Parameter]
    public bool? Resizable { get; set; }

    [Parameter]
    public bool? ShowCloseButton { get; set; }

    [Parameter]
    public bool? ShowTitleBar { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool? Enabled { get; set; }

    [Parameter]
    public int? Width { get; set; }

    [Parameter]
    public int? Height { get; set; }

    [Parameter]
    public int? InitialX { get; set; }

    [Parameter]
    public int? InitialY { get; set; }

    [Parameter]
    public bool? UseCdn { get; set; }

    [Parameter]
    public FloatingWindowStyleOptions? StyleOptions { get; set; }

    [Parameter]
    public bool? AutoSizeToContent { get; set; }

    [Parameter]
    public bool? DynamicAutoSizeToContent { get; set; }

    [Parameter]
    public bool? RecenterOnResize { get; set; }

    public bool IsVisible => _visible;

    private FloatingWindowOptions MergedOptions => new()
    {
        Draggable = Draggable ?? Options.Draggable,
        Resizable = Resizable ?? Options.Resizable,
        ShowCloseButton = ShowCloseButton ?? Options.ShowCloseButton,
        ShowTitleBar = ShowTitleBar ?? Options.ShowTitleBar,
        Title = Title ?? Options.Title,
        Enabled = Enabled ?? Options.Enabled,
        Width = Width ?? Options.Width,
        Height = Height ?? Options.Height,
        InitialX = InitialX ?? Options.InitialX,
        InitialY = InitialY ?? Options.InitialY,
        MinWidth = Options.MinWidth,
        MinHeight = Options.MinHeight,
        MaxWidth = Options.MaxWidth,
        MaxHeight = Options.MaxHeight,
        ConstrainToViewport = Options.ConstrainToViewport,
        CenterOnShow = Options.CenterOnShow,
        FocusOnShow = Options.FocusOnShow,
        UseCdn = UseCdn ?? Options.UseCdn,
        ZIndex = Options.ZIndex,
        StyleOptions = StyleOptions ?? Options.StyleOptions,
        AutoSizeToContent = AutoSizeToContent ?? Options.AutoSizeToContent,
        DynamicAutoSizeToContent = DynamicAutoSizeToContent ?? Options.DynamicAutoSizeToContent,
        RecenterOnResize = RecenterOnResize ?? Options.RecenterOnResize
    };

    private bool _initialized;
    private bool _visible;
    private DotNetObjectReference<FloatingWindow>? _dotNetRef;

    [JSInvokable]
    public Task InvokeOnShow()
    {
        _visible = true;
        return OnShow.InvokeIfHasDelegate();
    }

    [JSInvokable]
    public Task InvokeOnHide()
    {
        _visible = false;
        return OnHide.InvokeIfHasDelegate();
    }

    [JSInvokable]
    public Task InvokeOnDragStart()
    {
        return OnDragStart.InvokeIfHasDelegate();
    }

    [JSInvokable]
    public Task InvokeOnDragEnd()
    {
        return OnDragEnd.InvokeIfHasDelegate();
    }

    [JSInvokable]
    public async Task OnContentResized()
    {
        if (MergedOptions.RecenterOnResize)
        {
            await Center();
        }
    }

    private async Task OnCloseClick()
    {
        await Hide();
    }

    public async ValueTask Center(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            try
            {
                FloatingWindowSize windowSize = await WindowInterop.GetSize(ElementId, linked);
                FloatingWindowSize viewportSize = await WindowInterop.GetViewportSize(linked);

                int x = (viewportSize.Width - windowSize.Width) / 2;
                int y = (viewportSize.Height - windowSize.Height) / 2;

                await WindowInterop.SetPosition(ElementId, x, y, linked);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error centering window");
                // Fallback to default positioning
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await WindowInterop.Initialize(MergedOptions.UseCdn, CancellationToken);
            _dotNetRef = DotNetObjectReference.Create(this);

            // Wait a bit to ensure the element is in the DOM
            await Task.Delay(10, CancellationToken);

            await WindowInterop.Create(ElementId, MergedOptions, CancellationToken);
            await WindowInterop.SetCallbacks(ElementId, _dotNetRef!);

            // Set initialized after everything is done
            _initialized = true;
            StateHasChanged();
        }
    }

    public async ValueTask Show(CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
            {
                try
                {
                    if (MergedOptions.CenterOnShow)
                    {
                        await WindowInterop.CenterInViewport(ElementId, linked);
                    }

                    await WindowInterop.Show(ElementId, linked);
                    _visible = true;
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logger.LogError("Error showing window {S}: {ExMessage}", ElementId, ex.Message);
                }
            }
        }
        else
        {
            Logger.LogWarning("Window {S} not initialized yet", ElementId);
        }
    }

    public async ValueTask Hide(CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                await WindowInterop.Hide(ElementId, linked);
            _visible = false;
        }
    }

    public async ValueTask Toggle(CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                await WindowInterop.Toggle(ElementId, linked);
            _visible = !_visible;
        }
    }

    public async ValueTask Close(CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                await WindowInterop.Close(ElementId, linked);
            _visible = false;
        }
    }

    public async ValueTask<(int x, int y)> GetPosition(CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                return await WindowInterop.GetPosition(ElementId, linked);
        }

        return (0, 0);
    }

    public async ValueTask SetPosition(int x, int y, CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                await WindowInterop.SetPosition(ElementId, x, y, linked);
        }
    }

    public async ValueTask<FloatingWindowSize> GetSize(CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                return await WindowInterop.GetSize(ElementId, linked);
        }

        return new FloatingWindowSize {Width = 0, Height = 0};
    }

    public async ValueTask SetSize(int width, int height, CancellationToken cancellationToken = default)
    {
        if (_initialized)
        {
            CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

            using (cts)
                await WindowInterop.SetSize(ElementId, width, height, linked);
        }
    }


    public async ValueTask Destroy(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await WindowInterop.Destroy(ElementId, linked);
    }

    private string GetWindowStyles()
    {
        var styles = new List<string>
        {
            $"background-color: {MergedOptions.StyleOptions.BackgroundColor}",
            $"border: {MergedOptions.StyleOptions.BorderWidth} solid {MergedOptions.StyleOptions.BorderColor}",
            $"border-radius: {MergedOptions.StyleOptions.BorderRadius}",
            $"box-shadow: {MergedOptions.StyleOptions.BoxShadow}",
            $"color: {MergedOptions.StyleOptions.TextColor}",
            $"font-family: {MergedOptions.StyleOptions.FontFamily}",
            $"font-size: {MergedOptions.StyleOptions.FontSize}",
            $"line-height: {MergedOptions.StyleOptions.LineHeight}",
            $"min-width: {MergedOptions.StyleOptions.MinWidth}",
            $"min-height: {MergedOptions.StyleOptions.MinHeight}",
            $"z-index: {MergedOptions.StyleOptions.ZIndex}",
            $"transition: opacity {MergedOptions.StyleOptions.TransitionDuration} {MergedOptions.StyleOptions.TransitionTimingFunction}, transform {MergedOptions.StyleOptions.TransitionDuration} {MergedOptions.StyleOptions.TransitionTimingFunction}",
            $"--close-button-hover-bg: {MergedOptions.StyleOptions.CloseButtonHoverBackgroundColor}",
            $"--close-button-active-bg: {MergedOptions.StyleOptions.CloseButtonActiveBackgroundColor}",
            $"--resize-handle-hover-bg: {MergedOptions.StyleOptions.ResizeHandleHoverBackgroundColor}",
            $"--focus-box-shadow: {MergedOptions.StyleOptions.BoxShadow}, 0 0 0 {MergedOptions.StyleOptions.FocusBorderWidth} {MergedOptions.StyleOptions.FocusBorderColor}"
        };

        // Add custom styles if provided
        if (MergedOptions.StyleOptions.CustomStyles != null)
        {
            foreach (KeyValuePair<string, string> customStyle in MergedOptions.StyleOptions.CustomStyles)
            {
                styles.Add($"{customStyle.Key}: {customStyle.Value}");
            }
        }

        return string.Join("; ", styles);
    }

    private string GetTitleBarStyles()
    {
        var styles = new List<string>
        {
            $"background: {MergedOptions.StyleOptions.TitleBarBackgroundGradient ?? MergedOptions.StyleOptions.TitleBarBackgroundColor}",
            $"color: {MergedOptions.StyleOptions.TitleBarTextColor}",
            $"font-weight: {MergedOptions.StyleOptions.TitleBarFontWeight}",
            $"font-size: {MergedOptions.StyleOptions.TitleBarFontSize}",
            $"padding: {MergedOptions.StyleOptions.TitleBarPadding}",
            $"border-bottom: 1px solid {MergedOptions.StyleOptions.TitleBarBorderBottomColor}"
        };

        return string.Join("; ", styles);
    }

    private string GetTitleStyles()
    {
        var styles = new List<string>
        {
            $"color: {MergedOptions.StyleOptions.TitleBarTextColor}",
            $"font-weight: {MergedOptions.StyleOptions.TitleBarFontWeight}",
            $"font-size: {MergedOptions.StyleOptions.TitleBarFontSize}"
        };

        return string.Join("; ", styles);
    }

    private string GetCloseButtonStyles()
    {
        var styles = new List<string>
        {
            $"background-color: {MergedOptions.StyleOptions.CloseButtonBackgroundColor}",
            $"color: {MergedOptions.StyleOptions.CloseButtonTextColor}",
            $"border-radius: {MergedOptions.StyleOptions.CloseButtonBorderRadius}",
            $"font-size: {MergedOptions.StyleOptions.CloseButtonFontSize}",
            $"transition: background-color {MergedOptions.StyleOptions.TransitionDuration} {MergedOptions.StyleOptions.TransitionTimingFunction}"
        };

        return string.Join("; ", styles);
    }

    private string GetContentStyles()
    {
        var styles = new List<string>
        {
            $"padding: {MergedOptions.StyleOptions.ContentPadding}",
            $"color: {MergedOptions.StyleOptions.TextColor}"
        };

        return string.Join("; ", styles);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();

        await WindowInterop.Destroy(ElementId, CancellationToken.None);
        _dotNetRef?.Dispose();
    }

}
